import requests, os
import json
import base64
from langchain.tools import tool
from typing import List
from urllib.parse import urlencode


class SpotifyTools:

    @staticmethod
    def get_user_id(access_token: str):
        # Make a request to Spotify API to get user information
        user_url = "https://api.spotify.com/v1/me"
        headers = {"Authorization": f"Bearer {access_token}"}
        user_response = requests.get(user_url, headers=headers)

        if user_response.status_code != 200:
            return (
                f"Failed to fetch user data. Status code: {user_response.status_code}"
            )

        user_data = user_response.json()
        user_id = user_data["id"]

        return user_id

    @staticmethod
    def get_spotify_token(client_id, client_secret):
        url = "https://accounts.spotify.com/api/token"

        # scopes required to create a playlist
        data = {
            "grant_type": "client_credentials",
            "scope": "playlist-modify-private playlist-modify-public",
        }
        headers = {
            "Authorization": f'Basic {base64.b64encode(f"{client_id}:{client_secret}".encode()).decode()}'
        }

        response = requests.post(url, data=data, headers=headers)

        if response.status_code == 200:
            token_data = response.json()
            access_token = token_data.get("access_token")
            return access_token
        else:
            print("Failed to fetch Spotify token. Status code:", response.status_code)
            return None

    @tool(
        "Search songs uris on Spotify",
    )
    def search_songs_uris(song_titles: List[str]):
        """Userful to search the songs uri on spotify and return the list of uris of each song"""

        spotify_token = SpotifyTools.get_spotify_token(
            os.environ["SPOTIFY_CLIENT_ID"], os.environ["SPOTIFY_CLIENT_SECRET"]
        )
        if not spotify_token:
            return "Failed to fetch Spotify token."

        url = "https://api.spotify.com/v1/search"
        headers = {
            "Authorization": f"Bearer {spotify_token}",
        }

        songs_uris = []
        for song_title in song_titles:
            params = {"q": song_title, "type": "track", "market": "IT", "limit": 1}
            response = requests.get(url, params=params, headers=headers)

            if response.status_code == 200:
                data = response.json()
                if (
                    "tracks" in data
                    and "items" in data["tracks"]
                    and len(data["tracks"]["items"]) > 0
                ):
                    track_uri = data["tracks"]["items"][0]["uri"]
                    songs_uris.append(f"the song uri of {song_title} is : {track_uri}")
                else:
                    print("No track found.")
            else:
                print("Failed to fetch track URI. Status code:", response.status_code)

        return "\n".join(songs_uris)

    @tool("Create new playlist on Spotify")
    def create_playlist_by_uris(
        songs_uris: List[str],
        access_token: str,
        playlist_name="made by NTTLuke (with CrewAI)",
    ):
        """
        Userful to create a playlist on spotify by using the uris of the songs and returns the playlist id

        songs_uris : List[str] : The list of songs uris to add to the playlist
        access_token : str : The access token to authenticate the request
        playlist_name : str : The name of the playlist to create

        Returns
        the playlist id of the created playlist
        """

        user_id = SpotifyTools.get_user_id(access_token)

        url = f"https://api.spotify.com/v1/users/{user_id}/playlists"
        headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json",
        }
        data = {
            "name": playlist_name,
            "description": "generated by CrewAI",
            "public": False,
        }

        response = requests.post(url, headers=headers, json=data)

        if response.status_code == 201 or response.status_code == 200:
            playlist_data = response.json()
            playlist_id = playlist_data.get("id")
            print("Playlist created successfully with ID:", playlist_id)

            data = {"uris": songs_uris, "position": 0}
            response = requests.post(
                f"https://api.spotify.com/v1/playlists/{playlist_id}/tracks",
                headers=headers,
                json=data,
            )
            if response.status_code == 201 or response.status_code == 200:
                return f"Created a new playlist with playlist_id : {playlist_id}"
            else:
                print(
                    "Failed to add songs to the playlist. Status code:",
                    response.status_code,
                )
                return ""

        else:
            print("Failed to create playlist. Status code:", response.status_code)
            return None

    @tool("Play the playlist on the specific device of the user")
    def start_playing_playlist(access_token: str, playlist_id: str, device_type: str):
        """Useful for initiating playback of a playlist identified by playlist_id and device_type
        access_token : str : The access token to authenticate the request
        playlist_id : str : The playlist id to play created previously
        device_type: str : The device type where to play the playlist (mobile, computer, speaker)
        """

        import time

        url = f"https://api.spotify.com/v1/me/player/devices?type={device_type}"

        headers = {"Authorization": f"Bearer {access_token}"}

        response = requests.get(url, headers=headers)

        if response.status_code == 200:
            devices = response.json().get("devices", [])
            if devices:
                for device in devices:
                    if str.lower(device["type"]) != device_type.lower():
                        continue

                    device_id = device["id"]
                    url = f"https://api.spotify.com/v1/me/player/play?device_id={device_id}"
                    headers = {
                        "Authorization": f"Bearer {access_token}",
                        "Content-Type": "application/json",
                    }
                    data = {
                        "context_uri": f"spotify:playlist:{playlist_id}",
                    }

                    time.sleep(2)

                    response = requests.put(url, headers=headers, json=data)

                    if response.status_code == 204:
                        return "Playback started successfully."
                    else:
                        print(
                            "Failed to start playback. Status code:",
                            response.status_code,
                        )
                        return f"Failed to start playback: {response.status_code}"

        else:
            return {"error": response.status_code, "message": response.text}


def test_create_playlist():
    songs_uris = [
        "spotify:track:37FjxvMhMjt3YRecpx7HsC",
        "spotify:track:4191RXFPa7Ge9XkA4cWlna",
    ]

    access_token = ""

    playlist_id = SpotifyTools.create_playlist_by_uris(
        songs_uris, access_token, "NTTLuke Playlist using CrewAI"
    )

    print("Playlist ID:", playlist_id)


def test_search_songs():
    # Replace with your client ID and client secret
    # client_id = os.environ["SPOTIFY_CLIENT_ID"]
    # client_secret = os.environ["SPOTIFY_CLIENT_SECRET"]

    # # Get the access token
    # access_token = SpotifyTools.get_spotify_token(client_id, client_secret)

    # print(SpotifyTools.search_songs_uris(["Back in Black"]))

    # get_user_authorization_url(
    #     client_id=os.environ["SPOTIFY_CLIENT_ID"],
    #     redirect_uri="http://localhost:3000/callback",
    # )
    pass


def test_play_playlist(access_token: str):
    # Replace with your access token and playlist ID
    playlist_id = "3n0GcjIurtegGqxBqEzclF"

    SpotifyTools.start_playing_playlist(access_token, playlist_id, "computer")


if __name__ == "__main__":
    access_token = ""

    # test_play_playlist()
    test_play_playlist(access_token=access_token)
